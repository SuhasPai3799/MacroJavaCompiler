//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
	 //
	 // Auto class visitors--probably don't need to be overridden.
	 //
	 Set<String> class_set = new HashSet<String> ();
	 HashMap<String,Vector> all_scope_vars = new HashMap<String,Vector> ();
	 HashMap<String,Vector> all_type_vars =  new HashMap<String,Vector> ();
	 HashMap<String,String> parent_map = new HashMap<String,String> ();
	 HashMap<String,Vector> function_params =  new HashMap<String,Vector> ();
   	 HashMap<String,String> function_rets = new HashMap<String,String> (); 
   	 HashMap<String,Vector> all_funcs = new HashMap<String,Vector> ();
	 Vector stack = new Vector();
	 boolean var_set=false;
	 boolean first=true;
	 boolean array_look=false;
   	 Vector args =  new Vector();
   	 Vector full_stack = new Vector ();

	 public R visit(NodeList n) {
			R _ret=null;
			int _count=0;
			for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
				 e.nextElement().accept(this);
				 _count++;
			}
			return _ret;
	 }

	 public R visit(NodeListOptional n) {
			if ( n.present() ) {
				 R _ret=null;
				 int _count=0;
				 for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
						e.nextElement().accept(this);
						_count++;
				 }
				 return _ret;
			}
			else
				 return null;
	 }

	 public R visit(NodeOptional n) {
			if ( n.present() )
				 return n.node.accept(this);
			else
				 return null;
	 }

	 public R visit(NodeSequence n) {
			R _ret=null;
			int _count=0;
			for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
				 e.nextElement().accept(this);
				 _count++;
			}
			return _ret;
	 }
	 public void error1(int x)
	 {
	 	System.out.println("Program type checked successfully");
	 	System.exit(0);
	 }
	 public void addStack(String str)
	 {
	 		stack.add(str);
	 }
	 public void remStack()
	 {
	 		if(stack.size()>0)
	 		{
	 			stack.remove(stack.size() - 1);
	 		}
	 }
   public void debug(String str)
   {
      System.out.println(str);
   }
	 public void addToScope(String str)
	 {
	 		String cur_scope=(String)stack.lastElement();
	 		Vector gg = (Vector)all_scope_vars.get(cur_scope);
	 		for(int i=0;i<gg.size();i++)
	 		{
	 			if(gg.get(i).equals(str))
	 			{
	 				error(0);
	 			}
	 		}
			all_scope_vars.get(cur_scope).add(str);
	 }
	 public void addToType(String str)
	 {
	 		String cur_scope=(String)stack.lastElement();
			all_type_vars.get(cur_scope).add(str);
	 }
	 
	 public void checkClasses()
	 {
	 		for(String classes : class_set)
	 		{
	 			 String cur=classes;
	 			 int ctr=0;
	 			 while(ctr<100)
	 			 {
	 			 		ctr++;
	 			 		if(!class_set.contains(cur))
	 			 		{
	 			 			error(1);
	 			 		}
	 			 		if(parent_map.get(cur).equals(cur))
	 			 		{
	 			 			break;
	 			 		} 
	 			 		cur=parent_map.get(cur);

	 			 }
	 			 if(ctr>99)
	 			 {
	 			 	error(0);
	 			 }
	 		}
	 }
	 public void checkOver()
	 {
	 	for(String classes : class_set)
	 	{
	 		
	 		String cur=classes;
	 		String par=cur;
	 		while(true)
	 		{
	 			Vector v1=all_funcs.get(cur);
	 			Vector v2=all_funcs.get(par);
	 			for(int i=0;i<v1.size();i++)
	 			{
	 				for(int j=0;j<v2.size();j++)
	 				{
	 					if(v1.get(i).equals(v2.get(j)))
	 					{
	 						Vector gg = function_params.get(cur+":"+v1.get(i));
	 						Vector wp = function_params.get(par+":"+v2.get(j));
	 						if(!function_rets.get(cur+":"+v1.get(i)).equals(function_rets.get(par+":"+v2.get(j))))
	 						{
	 							error(0);
	 						}
	 						if(gg.size()!=wp.size())
	 						{
	 							//debug("Done messed up");
	 							error(0);
	 							
	 						}
	 						else
	 						{
	 							for(int k=0;k<gg.size();k++)
	 							{
	 								if(!gg.get(k).equals(wp.get(k)))
	 								{
	 									//debug("Done messed up1");
	 									error(0);
	 								}
	 							}
	 						}
	 					}
	 				}
	 			}
	 			if(parent_map.get(par).equals(par))
	 			{
	 				break;
	 			}
	 			par=parent_map.get(par);
	 		}
	 	}
	 }

	 public void addToFunc(String str)
	 {
	 		String cur_scope=(String)stack.lastElement();
	 		function_params.get(cur_scope).add(str);

	 }
   public void error(int x)
   {
   		if(x==0)
   		{
      	debug("Type error");
      	}
      else
      {
      	debug("Symbol not found");
      }
      System.exit(0);
   }
   public void find()
   {
   		System.out.println("Program type checked successfully");
   		System.exit(0);
   }
	 public String fullStack()
	 {
	 		String full_name="";
	 		String old_name="";
			Iterator i = stack.iterator();
			while(i.hasNext())
			{
				full_name+=i.next();
				old_name=full_name;

				full_name+=":";
			}
			return old_name;
	 }
	 public String getType(String str)
	 {
      
      String cur_scope=(String)stack.lastElement();
      int ctr=0;
	 		while(ctr<100)
	 		{
	 			ctr++;
	 	try
	 	{
        Vector cur_vars=all_scope_vars.get(cur_scope);
        Vector cur_types=all_type_vars.get(cur_scope);
        for(int i=0;i<cur_vars.size();i++)
        {
          if(cur_vars.get(i).equals(str))
            return (String)cur_types.get(i);
        }
			if(parent_map.get(cur_scope).equals(cur_scope))
            {break;}
          cur_scope=parent_map.get(cur_scope);
      	}
      	catch(Exception e){
      		error(1);
	 		}
      	}

	 if(ctr>99)
	 			 {
	 			 	error(0);
	 			 }
      //System.out.println("Could  not find in " +(String)stack.lastElement());
      error(1);
      return "NotFound"; 

	 }
   public String searchType(String str, String scope)
   {
      String cur_scope=scope;
      int ctr=0;

      while(ctr<100)
      {
      	ctr++;
      	try{
        Vector cur_vars=all_scope_vars.get(cur_scope);
        Vector cur_types=all_type_vars.get(cur_scope);
        for(int i=0;i<cur_vars.size();i++)
        {
          if(cur_vars.get(i).equals(cur_scope+":"+str))
          { 
            if(((String)cur_types.get(i)).equals("Function"))
            {
              return (String)function_rets.get(cur_scope+":"+str);
            }
            else
              {
                error(0);
              }
          }

          
        }
          if(parent_map.get(cur_scope).equals(cur_scope))
            {break;}
          cur_scope=parent_map.get(cur_scope);
      	}
      	catch(Exception e)
      	{
      		error(1);
      		
      	}
      }
      if(ctr>99)
	 			 {
	 			 	error(0);
	 			 }
      //System.out.println("Could  not find in " +scope);
      error(1);
      return "NotFound"; 
   }

   public String searchRes(String str, String scope)
   {
      String cur_scope=scope;
      int ctr=0;

      while(ctr<100)
      {
      	ctr++;
      	try{
        Vector cur_vars=all_scope_vars.get(cur_scope);
        Vector cur_types=all_type_vars.get(cur_scope);
        for(int i=0;i<cur_vars.size();i++)
        {
          if(cur_vars.get(i).equals(cur_scope+":"+str))
          { 
            if(((String)cur_types.get(i)).equals("Function"))
            {
              return (String)(cur_scope+":"+str);
            }
            else
              {
                error(0);
              }
          }

          
        }
          if(parent_map.get(cur_scope).equals(cur_scope))
           { break;}
          cur_scope=parent_map.get(cur_scope);
      	}
      	catch(Exception e)
      	{
      		error(1);
      	}
      }
      if(ctr>99)
	 			 {
	 			 	error(0);
	 			 }
      //System.out.println("Could  not find in " +scope);
      error(1);
      return "NotFound"; 
   }

	 public R visit(NodeToken n) { return null; }

	 //
	 // User-generated visitor methods below
	 //

	 /**
		* f0 -> MainClass()
		* f1 -> ( TypeDeclaration() )*
		* f2 -> <EOF>
		*/
	 public R visit(Goal n) {
	 	R _ret=null;
	 	if(first)
	 	{
			//System.out.println("What");
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
      
			first=false;
			
			//System.out.println("<-------------------------------------------> End of first pass");
			
		}
		else
		{
			checkClasses();
			
			
			try{
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			checkOver();
			}
			catch(Exception e)
			{
				find();
			}
				
     
		}
		return _ret;
	 }

	 /**
		* f0 -> "class"
		* f1 -> Identifier()
		* f2 -> "{"
		* f3 -> "public"
		* f4 -> "static"
		* f5 -> "void"
		* f6 -> "main"
		* f7 -> "("
		* f8 -> "String"
		* f9 -> "["
		* f10 -> "]"
		* f11 -> Identifier()
		* f12 -> ")"
		* f13 -> "{"
		* f14 -> PrintStatement()
		* f15 -> "}"
		* f16 -> "}"
		*/
	 public R visit(MainClass n) {
			R _ret=null;
			if(first)
			{
			n.f0.accept(this);
			String main_name=(String)n.f1.accept(this);
			addStack(main_name);
			if(class_set.contains(main_name))
			{
				error(0);
			}
			class_set.add(main_name);

			all_scope_vars.put(main_name,new Vector());
			all_type_vars.put(main_name, new Vector());
			all_funcs.put(main_name,new Vector());
			parent_map.put(main_name,main_name);
			n.f2.accept(this);
			n.f3.accept(this);
			n.f4.accept(this);
			n.f5.accept(this);
			n.f6.accept(this);
			n.f7.accept(this);
			n.f8.accept(this);
			n.f9.accept(this);
			n.f10.accept(this);
			n.f11.accept(this);
			n.f12.accept(this);
			n.f13.accept(this);
			n.f14.accept(this);
			n.f15.accept(this);
			n.f16.accept(this);
     		remStack();
			//printVars(main_name);
			
			}
			else
			{
				n.f0.accept(this);
				String main_name=(String)n.f1.accept(this);
				addStack(main_name);
				n.f2.accept(this);
				n.f3.accept(this);
				n.f4.accept(this);
				n.f5.accept(this);
				n.f6.accept(this);
				n.f7.accept(this);
				n.f8.accept(this);
				n.f9.accept(this);
				n.f10.accept(this);
				n.f11.accept(this);
				n.f12.accept(this);
				n.f13.accept(this);
				n.f14.accept(this);
				n.f15.accept(this);
				n.f16.accept(this);
				remStack();

			}
			return _ret;
	 }

	 /**
		* f0 -> ClassDeclaration()
		*       | ClassExtendsDeclaration()
		*/
	 public R visit(TypeDeclaration n) {
			R _ret=null;
			n.f0.accept(this);
			return _ret;
	 }

	 /**
		* f0 -> "class"
		* f1 -> Identifier()
		* f2 -> "{"
		* f3 -> ( VarDeclaration() )*
		* f4 -> ( MethodDeclaration() )*
		* f5 -> "}"
		*/
	 public R visit(ClassDeclaration n) {
			R _ret=null;
			if(first)
			{
				n.f0.accept(this);

				String str;
				str=(String)n.f1.accept(this);


				addStack(str);
				if(class_set.contains(str))
				{
					error(0);
				}
				class_set.add(str);

				all_scope_vars.put(str,new Vector());
				all_type_vars.put(str, new Vector());
				all_funcs.put(str,new Vector());
				parent_map.put(str,str);
				//System.out.println(str);	
				n.f2.accept(this);
				n.f3.accept(this);
				n.f4.accept(this);
				n.f5.accept(this);
	
				//printVars(str);
				remStack();
			}
			else
			{	

				n.f0.accept(this);

				String str;
				str=(String)n.f1.accept(this);
				addStack(str);

				n.f2.accept(this);

				n.f3.accept(this);

				n.f4.accept(this);

				n.f5.accept(this);
				remStack();

			}
			return _ret;
	 }

	 /**
		* f0 -> "class"
		* f1 -> Identifier()
		* f2 -> "extends"
		* f3 -> Identifier()
		* f4 -> "{"
		* f5 -> ( VarDeclaration() )*
		* f6 -> ( MethodDeclaration() )*
		* f7 -> "}"
		*/
	 public R visit(ClassExtendsDeclaration n) {
			R _ret=null;
			if(first)
			{
				n.f0.accept(this);
				String new_class,old_class;


				new_class=(String)n.f1.accept(this);

				addStack(new_class);
				if(class_set.contains(new_class))
				{
					error(0);
				}
				class_set.add(new_class);

				n.f2.accept(this);
				old_class=(String)n.f3.accept(this);
				//add check new class old class
				parent_map.put(new_class,old_class);

				all_scope_vars.put(new_class,new Vector());
				all_type_vars.put(new_class, new Vector());
				all_funcs.put(new_class,new Vector());
				n.f4.accept(this);
				n.f5.accept(this);
				n.f6.accept(this);
				n.f7.accept(this);
        //printVars(new_class);
				remStack();
			}
			else
			{
				n.f0.accept(this);
				String new_class;
				new_class=(String)n.f1.accept(this);
				addStack(new_class);
				n.f2.accept(this);
				n.f3.accept(this);
				n.f4.accept(this);
				n.f5.accept(this);
				n.f6.accept(this);
				n.f7.accept(this);
				remStack();
			}
			return _ret;
	 }

	 /**
		* f0 -> Type()
		* f1 -> Identifier()
		* f2 -> ";"
		*/
	 public R visit(VarDeclaration n) {
			R _ret=null;
			if(first)
			{
				String type = (String) n.f0.accept(this);
				String var_name=(String)n.f1.accept(this);
				addToScope(var_name);
				addToType(type);
				n.f2.accept(this);
			}
			else
			{
				String type = (String)n.f0.accept(this);
				n.f1.accept(this);
				n.f2.accept(this);
				if(!(type.equals("int") || type.equals("boolean") || type.equals("int []") || class_set.contains(type)))
				{
					if(!class_set.contains(type))
					{
						error(1);
					}
					else
					{
						error(0);
					}
				}
			}
			return _ret;
	 }

	 /**
		* f0 -> "public"
		* f1 -> Type()
		* f2 -> Identifier()
		* f3 -> "("
		* f4 -> ( FormalParameterList() )?
		* f5 -> ")"
		* f6 -> "{"
		* f7 -> ( VarDeclaration() )*
		* f8 -> ( Statement() )*
		* f9 -> "return"
		* f10 -> Expression()
		* f11 -> ";";
		* f12 -> "}"
		*/
	 public R visit(MethodDeclaration n) {
			R _ret=null;

			if(first)
			{

				n.f0.accept(this);
				String type = (String)n.f1.accept(this);
				String method_name=(String)n.f2.accept(this);
				String old_name=fullStack();
				String full_name=old_name+":";
				full_name+=method_name;	
				parent_map.put(full_name,old_name);
				//System.out.println(old_vars.size());
        		function_rets.put(full_name,type);
				addStack(full_name);
				all_scope_vars.put(full_name,new Vector());
				all_scope_vars.get(old_name).add(full_name);
				Vector v =(Vector) all_scope_vars.get(old_name);
				for(int i=0;i<v.size();i++)
				{
					if(v.get(i).equals(method_name))
					{
						error(0);
					}
				}
				all_funcs.get(old_name).add(method_name);
				all_type_vars.put(full_name,new Vector());
				all_type_vars.get(old_name).add("Function");
				function_params.put(full_name,new Vector());

				n.f3.accept(this);
				n.f4.accept(this);
				n.f5.accept(this);
				n.f6.accept(this);
				n.f7.accept(this);
				n.f8.accept(this);
				n.f9.accept(this);
				n.f10.accept(this);
				n.f11.accept(this);
				n.f12.accept(this);
				
				//printVars(full_name);
				remStack();
			}
			else
			{

				n.f0.accept(this);
				String ret_type = (String)n.f1.accept(this);

				String method_name=(String)n.f2.accept(this);
				String old_name=fullStack();
				String full_name=old_name+":";
				full_name+=method_name;	
				addStack(full_name);

				n.f3.accept(this);
				n.f4.accept(this);
				n.f5.accept(this);

				n.f6.accept(this);
				n.f7.accept(this);

				n.f8.accept(this);

				n.f9.accept(this);

				String real_type =(String) n.f10.accept(this);

				if(class_set.contains(real_type))
				{

					boolean same=false;
					int ctr=0;
					String rhs=real_type;
					String lhs=ret_type;
	              	while(ctr<100)
	              	{
	              		ctr++;
	              		if(lhs.equals(rhs))
	              		{
	              			same=true;
	              			break;
	              		}
	              		if(parent_map.get(rhs).equals(rhs))
	              		{
	              			break;
	              		}
	              		rhs=parent_map.get(rhs);
	              	}
	              	if(ctr>99)
		 			 {
		 			 	error(0);
		 			 }
			            if(!same)
		              	{
		              		//debug(lhs + " not matching with "  + rhs);
		              		error(0);
		              	}
				}
		        else if(!ret_type.equals(real_type))
		        {
		          error(0);
		        }
				n.f11.accept(this);
				n.f12.accept(this);
				remStack();
			}

			return _ret;
	 }

	 /**
		* f0 -> FormalParameter()
		* f1 -> ( FormalParameterRest() )*
		*/
	 public R visit(FormalParameterList n) {
			R _ret=null;
			n.f0.accept(this);
			n.f1.accept(this);
			return _ret;
	 }

	 /**
		* f0 -> Type()
		* f1 -> Identifier()
		*/
	 public R visit(FormalParameter n) {
			R _ret=null;
			if(first)
			{
				String type = (String)n.f0.accept(this);
				String param = (String)n.f1.accept(this);
				addToScope(param);
				addToType(type);
				addToFunc(type);
			}
			else
			{

				String type = (String)n.f0.accept(this);
				//debug(type+"lol");

				String param = (String)n.f1.accept(this);

				if(!(type.equals("int") || type.equals("boolean") || type.equals("int []") || class_set.contains(type)))
				{
					if(!class_set.contains(type))
					{
						error(1);
					}
					else
					{
						error(0);
					}
				}

			}
			return _ret;
	 }

	 /**
		* f0 -> ","
		* f1 -> FormalParameter()
		*/
	 public R visit(FormalParameterRest n) {
			R _ret=null;
			n.f0.accept(this);
			n.f1.accept(this);
			return _ret;
	 }

	 /**
		* f0 -> ArrayType()
		*       | BooleanType()
		*       | IntegerType()
		*       | Identifier()
		*/
	 public R visit(Type n) {
			R _ret=null;
			
			return n.f0.accept(this);
	 }

	 /**
		* f0 -> "int"
		* f1 -> "["
		* f2 -> "]"
		*/
	 public R visit(ArrayType n) {
			R _ret=null;
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			return (R)"int []";
	 }

	 /**
		* f0 -> "boolean"
		*/
	 public R visit(BooleanType n) {
			R _ret=null;
			n.f0.accept(this);
			return (R)"boolean";
	 }

	 /**
		* f0 -> "int"
		*/
	 public R visit(IntegerType n) {
			R _ret=null;
			n.f0.accept(this);
			return (R)"int";
	 }

	 /**
		* f0 -> Block()
		*       | AssignmentStatement()
		*       | ArrayAssignmentStatement()
		*       | IfStatement()
		*       | WhileStatement()
		*       | PrintStatement()
		*/
	 public R visit(Statement n) {
			R _ret=null;
			n.f0.accept(this);

			return _ret;
	 }

	 /**
		* f0 -> "{"
		* f1 -> ( Statement() )*
		* f2 -> "}"
		*/
	 public R visit(Block n) {
			R _ret=null;

			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);

			return _ret;
	 }

	 /**
		* f0 -> Identifier()
		* f1 -> "="
		* f2 -> Expression()
		* f3 -> ";"
		*/
	 public R visit(AssignmentStatement n) {
			R _ret=null;
			if(first)
			{
				var_set=false;
				n.f0.accept(this);
				n.f1.accept(this);
				n.f2.accept(this);
				n.f3.accept(this);
			}
			else
			{

       			
				String lhs = (String)n.f0.accept(this);
				n.f1.accept(this);
				String rhs = (String)n.f2.accept(this);
        		n.f3.accept(this);
				//debug(getType(lhs) + ":" + rhs);  //add CHeck
				lhs=getType(lhs);
				if(rhs.equals("this"))
				{
					String scope=(String)stack.lastElement();
					int ctr=0;

					while(ctr<100)
					{
						ctr++;
						if(class_set.contains(scope))
						{
							break;
						}
						scope=parent_map.get(scope);
					}
					if(ctr>99)
	 			 {
	 			 	error(0);
	 			 }
					rhs=scope;
					//debug("type convert");
				}
				else if(class_set.contains(lhs) && class_set.contains(rhs))
				{
					boolean same=false;
					int ctr=0;

	              	while(ctr<100)
	              	{
	              		ctr++;
	              		if(lhs.equals(rhs))
	              		{
	              			same=true;
	              			break;
	              		}
	              		if(parent_map.get(rhs).equals(rhs))
	              		{
	              			break;
	              		}
	              		rhs=parent_map.get(rhs);
	              	}
	              	if(ctr>99)
	 			 {
	 			 	error(0);
	 			 }
		            if(!same)
	              	{
	              		//debug(lhs + " not matching with "  + rhs);
	              		error(0);
	              	}
				}
				else
				{
					if(!(lhs.equals(rhs)))
					{
						//debug(lhs + " not matching with "  + rhs);
						error(0);
					}
				}

			}

			return _ret;
	 }

	 /**
		* f0 -> Identifier()
		* f1 -> "["
		* f2 -> Expression()
		* f3 -> "]"
		* f4 -> "="
		* f5 -> Expression()
		* f6 -> ";"
		*/
	 public R visit(ArrayAssignmentStatement n) {
			R _ret=null;
			if(first)
			{
				n.f0.accept(this);
				n.f1.accept(this);
				n.f2.accept(this);
				n.f3.accept(this);
				n.f4.accept(this);
				n.f5.accept(this);
				n.f6.accept(this);
			}
			else
			{

				String name = (String)n.f0.accept(this);
				n.f1.accept(this);
				String type = (String)n.f2.accept(this);
				n.f3.accept(this);
				n.f4.accept(this);
				String res_type = (String)n.f5.accept(this);
				//debug(type + "lol");
				if(!res_type.equals("int") || !getType(name).equals("int []") || !type.equals("int"))
				{
					error(0);
				}
				n.f6.accept(this);

			}
			return _ret;
	 }

	 /**
		* f0 -> IfthenElseStatement()
		*       | IfthenStatement()
		*/
	 public R visit(IfStatement n) {
			R _ret=null;
			n.f0.accept(this);
			return _ret;
	 }

	 /**
		* f0 -> "if"
		* f1 -> "("
		* f2 -> Expression()
		* f3 -> ")"
		* f4 -> Statement()
		*/
	 public R visit(IfthenStatement n) {
			R _ret=null;
      if(first)
      {
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			n.f3.accept(this);
			n.f4.accept(this);
      }
      else
      {

        n.f0.accept(this);
        n.f1.accept(this);

        String type = (String)n.f2.accept(this);
        
        if(!type.equals("boolean"))
        {
          error(0);
        }
        n.f3.accept(this);
        n.f4.accept(this);
      }
			return _ret;
	 }

	 /**
		* f0 -> "if"
		* f1 -> "("
		* f2 -> Expression()
		* f3 -> ")"
		* f4 -> Statement()
		* f5 -> "else"
		* f6 -> Statement()
		*/
	 public R visit(IfthenElseStatement n) {
			R _ret=null;
      if(first)
      {
  			n.f0.accept(this);
  			n.f1.accept(this);
  			n.f2.accept(this);
  			n.f3.accept(this);
  			n.f4.accept(this);
  			n.f5.accept(this);
  			n.f6.accept(this);
      }
      else
      {

        n.f0.accept(this);
        n.f1.accept(this);
        String type = (String)n.f2.accept(this);
        if(!type.equals("boolean"))
        {
        	error(0);
        }
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
      }
			return _ret;
	 }

	 /**
		* f0 -> "while"
		* f1 -> "("
		* f2 -> Expression()
		* f3 -> ")"
		* f4 -> Statement()
		*/
	 public R visit(WhileStatement n) {
			R _ret=null;
			if(first)
			{
				n.f0.accept(this);
				n.f1.accept(this);
				n.f2.accept(this);
				n.f3.accept(this);
				n.f4.accept(this);
			}
			else
			{

				n.f0.accept(this);
				n.f1.accept(this);
				String type = (String)n.f2.accept(this);
				if(!type.equals("boolean"))
		        {
		        	error(0);
		        }
				n.f3.accept(this);
				n.f4.accept(this);
			}
			return _ret;
	 }

	 /**
		* f0 -> "System.out.println"
		* f1 -> "("
		* f2 -> Expression()
		* f3 -> ")"
		* f4 -> ";"
		*/
	 public R visit(PrintStatement n) {
			R _ret=null;
			n.f0.accept(this);
			n.f1.accept(this);

			String gg = (String)n.f2.accept(this);
			if(!first)
			{
				if(!gg.equals("int"))
				{
					error(0);
				}

			}

			n.f3.accept(this);
			n.f4.accept(this);

			return _ret;
	 }

	 /**
		* f0 -> OrExpression()
		*       | AndExpression()
		*       | CompareExpression()
		*       | neqExpression()
		*       | PlusExpression()
		*       | MinusExpression()
		*       | TimesExpression()
		*       | DivExpression()
		*       | ArrayLookup()
		*       | ArrayLength()
		*       | MessageSend()
		*       | PrimaryExpression()
		*/
	 public R visit(Expression n) {
			R _ret=null;
			String gg = (String)n.f0.accept(this);

			return (R)gg;
	 }

	 /**
		* f0 -> PrimaryExpression()
		* f1 -> "&&"
		* f2 -> PrimaryExpression()
		*/
	 public R visit(AndExpression n) {
			R _ret=null;
			if(first)
			{
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			}
			else
			{
				String t1 = (String)n.f0.accept(this);
				String t2 = (String)n.f1.accept(this);
				String t3 = (String)n.f2.accept(this);
				if(!t1.equals("boolean") || !t3.equals("boolean"))
				{
					error(0);
				}
			}
			return (R)"boolean";
	 }

	 /**
		* f0 -> PrimaryExpression()
		* f1 -> "||"
		* f2 -> PrimaryExpression()
		*/
	 public R visit(OrExpression n) {
			R _ret=null;
			if(first)
			{
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			}
			else
			{
				String t1 = (String)n.f0.accept(this);
				String t2 = (String)n.f1.accept(this);
				String t3 = (String)n.f2.accept(this);
				if(!t1.equals("boolean") || !t3.equals("boolean"))
				{
					error(0);
				}
			}
			return (R)"boolean";
	 }

	 /**
		* f0 -> PrimaryExpression()
		* f1 -> "<="
		* f2 -> PrimaryExpression()
		*/
	 public R visit(CompareExpression n) {
			R _ret=null;
			if(first)
			{
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			}
			else
			{
				String t1 = (String)n.f0.accept(this);
				String t2 = (String)n.f1.accept(this);
				String t3 = (String)n.f2.accept(this);
				if(!t1.equals("int") || !t3.equals("int"))
				{
					error(0);
				}
			}
			return (R)"boolean";
	 }

	 /**
		* f0 -> PrimaryExpression()
		* f1 -> "!="
		* f2 -> PrimaryExpression()
		*/
	 public R visit(neqExpression n) {
			R _ret=null;
			if(first)
			{
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			}
			else
			{
				String t1 = (String)n.f0.accept(this);
				String t2 = (String)n.f1.accept(this);
				String t3 = (String)n.f2.accept(this);
				if(class_set.contains(t1) && class_set.contains(t3))
				{
					boolean same=false;
	              	int ctr1=0;
	              	String t4=new String();
	              	t4=t3;
	              	while(ctr1<100)
	              	{
	              		ctr1++;
	              		if(t1.equals(t4))
	              		{
	              			same=true;
	              			break;
	              		}
	              		if(parent_map.get(t4)==t4)
	              		{
	              			break;
	              		}
	              		t4=parent_map.get(t4);
	              	}
	              	if(ctr1>99)
		 			 {
		 			 	error(0);
		 			 }
	              	if(same==true)
	              	{
	              		;
	              	}
	              	else
	              	{
	              		String temp=t1;
	              		t1=t3;
	              		t3=temp;
	              		same=false;
		              	ctr1=0;
		              	
		              	t4=t3;
		              	while(ctr1<100)
		              	{
		              		ctr1++;
		              		if(t1.equals(t4))
		              		{
		              			same=true;
		              			break;
		              		}
		              		if(parent_map.get(t4)==t4)
		              		{
		              			break;
		              		}
		              		t4=parent_map.get(t4);
		              	}
		              	if(ctr1>99)
			 			 {
			 			 	error(0);
			 			 }
		              	if(same==true)
		              	{
		              		;
		              	}
		              	else
		              	{
		              		error(0);
		              	}
		              }
		              	
				}
				else if(t1.equals(t3) )
				{
					//error(0);
					;
				}
				else
				{
					error(0);
				}
			}
			return (R)"boolean";
	 }

	 /**
		* f0 -> PrimaryExpression()
		* f1 -> "+"
		* f2 -> PrimaryExpression()
		*/
	 public R visit(PlusExpression n) {
			R _ret=null;
			if(first)
			{
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			}
			else
			{
				String t1 = (String)n.f0.accept(this);
				String t2 = (String)n.f1.accept(this);
				String t3 = (String)n.f2.accept(this);
				if(!t1.equals("int") || !t3.equals("int"))
				{
					error(0);
				}
			}
			return (R)"int";
	 }

	 /**
		* f0 -> PrimaryExpression()
		* f1 -> "-"
		* f2 -> PrimaryExpression()
		*/
	 public R visit(MinusExpression n) {
			R _ret=null;
			if(first)
			{
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			}
			else
			{
				String t1 = (String)n.f0.accept(this);
				String t2 = (String)n.f1.accept(this);
				String t3 = (String)n.f2.accept(this);
				if(!t1.equals("int") || !t3.equals("int"))
				{
					error(0);
				}
			}
			return (R)"int";
	 }

	 /**
		* f0 -> PrimaryExpression()
		* f1 -> "*"
		* f2 -> PrimaryExpression()
		*/
	 public R visit(TimesExpression n) {
			R _ret=null;
			if(first)
			{
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			}
			else
			{
				String t1 = (String)n.f0.accept(this);
				String t2 = (String)n.f1.accept(this);
				String t3 = (String)n.f2.accept(this);
				if(!t1.equals("int") || !t3.equals("int"))
				{
					error(0);
				}
			}
			return (R)"int";
	 }

	 /**
		* f0 -> PrimaryExpression()
		* f1 -> "/"
		* f2 -> PrimaryExpression()
		*/
	 public R visit(DivExpression n) {
			R _ret=null;
			if(first)
			{
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			}
			else
			{
				String t1 = (String)n.f0.accept(this);
				String t2 = (String)n.f1.accept(this);
				String t3 = (String)n.f2.accept(this);
				if(!t1.equals("int") || !t3.equals("int"))
				{
					error(0);
				}
			}
			return (R)"int";
	 }

	 /**
		* f0 -> PrimaryExpression()
		* f1 -> "["
		* f2 -> PrimaryExpression()
		* f3 -> "]"
		*/
	 public R visit(ArrayLookup n) {
			R _ret=null;
      if(first)
      {
  			n.f0.accept(this);
  			n.f1.accept(this);
  			n.f2.accept(this);
  			n.f3.accept(this);
      }
      else
      {
      	array_look=true;
        String array_type = (String)n.f0.accept(this);
        array_look=false;
        //debug(array_type);
        n.f1.accept(this);
        String index_type= (String)n.f2.accept(this);
        n.f3.accept(this);
       	if(!getType(array_type).equals("int []"))
       	{
       		error(0);
       	}
       	if(!index_type.equals("int"))
       	{
       		error(0);
       	}
      }
			return (R)"int";
	 }

	 /**
		* f0 -> PrimaryExpression()
		* f1 -> "."
		* f2 -> "length"
		*/
	 public R visit(ArrayLength n) {
			R _ret=null;
      if(first)
      {
  			n.f0.accept(this);
  			n.f1.accept(this);
  			n.f2.accept(this);
      }
      else
      {
         String array_type = (String)n.f0.accept(this);
         n.f1.accept(this);
         n.f2.accept(this);
         if(!array_type.equals("int []"))
         {
         	error(0);
         }

      }
			return (R)"int";
	 }

	 /**
		* f0 -> PrimaryExpression()
		* f1 -> "."
		* f2 -> Identifier()
		* f3 -> "("
		* f4 -> ( ExpressionList() )?
		* f5 -> ")"
		*/
	 public R visit(MessageSend n) {
			R _ret=null;
      if(first)
      {
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
			n.f3.accept(this);
			n.f4.accept(this);
			n.f5.accept(this);
      }
      else
      {

        String cl_name = (String)n.f0.accept(this);

        n.f1.accept(this);
        String fname = (String)n.f2.accept(this);

        n.f3.accept(this);
        args.clear();
        full_stack.add(new Vector());
        n.f4.accept(this);
        int ctr=args.size();
        n.f5.accept(this);

        if(cl_name=="this")
        {
          String cur_scope=(String)stack.lastElement();
          String parent=parent_map.get(cur_scope);
          cur_scope=parent_map.get(cur_scope);
          cur_scope=cur_scope+":"+fname;
          String name=searchRes(fname,parent);
          Vector params=function_params.get(name);
          args=(Vector)full_stack.get(full_stack.size() - 1);
	      full_stack.remove(full_stack.size()-1);
          //debug(params.size() + " + " + args.size() + fname);
          if(params.size() !=args.size())
          {
            error(0);
          }
          else
          {
            for(int i=0;i<params.size();i++)
            {
              if(!(params.get(i).equals(args.get(i))))
              {
                //debug("Yello");
                error(0);
              }
            }
          }
          return (R)searchType(fname,parent);
        }
        else
        {
        	
        	String type = searchType(fname,cl_name);
        	
        	Vector params=function_params.get(cl_name+":"+fname);
        	
        	args=(Vector)full_stack.get(full_stack.size() - 1);
	        full_stack.remove(full_stack.size()-1);
        	//debug(params.size() + " + " + args.size() + fname);
        	if(params.size() !=args.size())
	          {
	            error(0);
	          }
	          else
	          {
	            for(int i=0;i<params.size();i++)
	            {
	              String t1=(String)params.get(i);
	              String t2=(String)args.get(i);
	              if(class_set.contains(t1) && class_set.contains(t2))
	              {
	              	boolean same=false;
	              	int ctr1=0;
	              	while(ctr1<100)
	              	{
	              		ctr1++;
	              		if(t1.equals(t2))
	              		{
	              			same=true;
	              			break;
	              		}
	              		if(parent_map.get(t2)==t2)
	              		{
	              			break;
	              		}
	              		t2=parent_map.get(t2);
	              	}
	              	if(ctr1>99)
	 			 {
	 			 	error(0);
	 			 }
	              	if(same==true)
	              	{
	              		continue;
	              	}
	              	else
	              	{

	              		error(0);
	              	}
	              }

	              if(!(params.get(i).equals(args.get(i))))
	              {
	              	//debug(cl_name + " done messed up " + fname);

	                error(0);
	              }	
	            }
	          }

        	return (R)type;

        }
      }
			return _ret;
	 }

	 /**
		* f0 -> Expression()
		* f1 -> ( ExpressionRest() )*
		*/
	 public R visit(ExpressionList n) {
			R _ret=null;
      if(!first)
      {
			String type = (String)n.f0.accept(this);
			if(type=="this")
			{
				String scope = (String)stack.lastElement();
				//debug("Fk this " + scope);
				int ctr=0;

				while(ctr<100)
				{
					ctr++;
					if(parent_map.get(scope).equals(scope))
						break;
					else if(class_set.contains(scope))
						break;
					scope=parent_map.get(scope);
				}
				type=scope;
			}
			//debug(type);
			int g=full_stack.size();
			g--;
			//debug(g + "added to ");
			Vector wait = (Vector)full_stack.get(g);
			wait.add(type);
      		args.add(type);
			n.f1.accept(this);
      }
      else
      {
        n.f0.accept(this);
        n.f1.accept(this);
      }
			return _ret;
	 }

	 /**
		* f0 -> ","
		* f1 -> Expression()
		*/
	 public R visit(ExpressionRest n) {
			R _ret=null;
      if(first)
      {
        n.f0.accept(this);
        n.f1.accept(this);
      }
      else
      {
  			n.f0.accept(this);
  			String type = (String)n.f1.accept(this);
  			int g=full_stack.size();
				g--;
				//debug(g + "added to ");
				Vector wait = (Vector)full_stack.get(g);
				wait.add(type);
        args.add(type);
      }
			return _ret;
	 }

	 /**
		* f0 -> IntegerLiteral()
		*       | TrueLiteral()
		*       | FalseLiteral()
		*       | Identifier()
		*       | ThisExpression()
		*       | ArrayAllocationExpression()
		*       | AllocationExpression()
		*       | NotExpression()
		*       | BracketExpression()
		*/
	 public R visit(PrimaryExpression n) {
			R _ret=null;
			if(!first)
			{
      		var_set=true;
      		if(array_look)
      		{
      			var_set=false;
      		}
					String gg = (String) n.f0.accept(this);
      		var_set=false;
			return (R)gg;
			}
			else
			{
				n.f0.accept(this);
			}
			return _ret;
	 }

	 /**
		* f0 -> <INTEGER_LITERAL>
		*/
	 public R visit(IntegerLiteral n) {
			R _ret=null;
			n.f0.accept(this);

			return (R)"int";
	 }

	 /**
		* f0 -> "true"
		*/
	 public R visit(TrueLiteral n) {
			R _ret=null;
			n.f0.accept(this);
			return (R)"boolean";
	 }

	 /**
		* f0 -> "false"
		*/
	 public R visit(FalseLiteral n) {
			R _ret=null;
			n.f0.accept(this);
			return (R)"boolean";
	 }

	 /**
		* f0 -> <IDENTIFIER>
		*/
	 public R visit(Identifier n) {
			R _ret=null;
			n.f0.accept(this);
      if(!var_set)
			{return (R) n.f0.tokenImage;}
      else
      {
      
        return (R)getType(n.f0.tokenImage);
      }
	 }

	 /**
		* f0 -> "this"
		*/
	 public R visit(ThisExpression n) {
			R _ret=null;
			n.f0.accept(this);
			return (R)"this";
	 }

	 /**
		* f0 -> "new"
		* f1 -> "int"
		* f2 -> "["
		* f3 -> Expression()
		* f4 -> "]"
		*/
	 public R visit(ArrayAllocationExpression n) {
			R _ret=null;
			if(first)
			{
				n.f0.accept(this);
				n.f1.accept(this);
				n.f2.accept(this);
				n.f3.accept(this);
				n.f4.accept(this);
			}
			else
			{
				n.f0.accept(this);
				n.f1.accept(this);
				n.f2.accept(this);
				String type = (String) n.f3.accept(this); //add check
				if(!type.equals("int"))
				{
					error(0);
				}
				n.f4.accept(this);
				return (R)"int []";
			}
			return _ret;
	 }

	 /**
		* f0 -> "new"
		* f1 -> Identifier()
		* f2 -> "("
		* f3 -> ")"
		*/
	 public R visit(AllocationExpression n) {
			R _ret=null;

			if(first)
			{
				n.f0.accept(this);
				var_set=false;
				n.f1.accept(this);
				n.f2.accept(this);
				n.f3.accept(this);
			}
			else
			{
				//debug("Henlo");
				n.f0.accept(this);
				var_set=false;
				String type = (String)n.f1.accept(this);
				//debug(type+"wtf");
				n.f2.accept(this);
				n.f3.accept(this);
				if(!( class_set.contains(type)))
				{
					error(1);
				}
				return (R)type;

			}
			return _ret;
	 }

	 /**
		* f0 -> "!"
		* f1 -> Expression()
		*/
	 public R visit(NotExpression n) {
			R _ret=null;
      if(first)
      {
			n.f0.accept(this);
			n.f1.accept(this);
      }
      else
      {
        n.f0.accept(this);
        String type = (String)n.f1.accept(this);
        if(!type.equals("boolean"))
        {
          //debug("Hello");
          error(0);
        }
      }
			return (R)"boolean";
	 }

	 /**
		* f0 -> "("
		* f1 -> Expression()
		* f2 -> ")"
		*/
	 public R visit(BracketExpression n) {
			R _ret=null;
      if(first)
      {
			n.f0.accept(this);
			n.f1.accept(this);
			n.f2.accept(this);
      }
      else
      {
        n.f0.accept(this);
        String type = (String)n.f1.accept(this);
        n.f2.accept(this);
        return (R) type;

      }
			return _ret;
	 }

	 /**
		* f0 -> Identifier()
		* f1 -> ( IdentifierRest() )*
		*/
	 public R visit(IdentifierList n) {
			R _ret=null;
			n.f0.accept(this);
			n.f1.accept(this);
			return _ret;
	 }

	 /**
		* f0 -> ","
		* f1 -> Identifier()
		*/
	 public R visit(IdentifierRest n) {
			R _ret=null;
			n.f0.accept(this);
			n.f1.accept(this);
			return _ret;
	 }

}
