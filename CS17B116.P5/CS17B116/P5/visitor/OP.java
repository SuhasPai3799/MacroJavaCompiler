//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class OP<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   int tot_count = 0;
   boolean return_flag=false;
   String cur_func = "";
   int stack_diff = 0;
   int cur_size = 0;
   public static HashMap<String,Integer> offset = new HashMap<String,Integer>();
   public R visit(NodeList n) {
      R _ret=(R)"";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         String gg = (String)_ret;
         gg += (String)e.nextElement().accept(this) + " ";
         _ret = (R)gg;
         _count++;
      }
      return (R)_ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
          R _ret=(R)"";
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            String gg = (String)_ret;
         gg += (String)e.nextElement().accept(this) + " " ;
         _ret = (R)gg;
            _count++;
         }
         return (R)_ret;
      }
      else
         return (R)" ";
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
      {
        String str = (String)(n.node.accept(this));
        debug(cur_func+"1234"+str);
        return (R)str;
      }
      else
         return (R)" ";
   }

   public R visit(NodeSequence n) {
      R _ret=(R)"";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         String gg = (String)_ret;
         gg += (String)e.nextElement().accept(this) + " ";
         _ret = (R)gg;
         _count++;
      }
      return (R)_ret;
   }

   public R visit(NodeToken n) { return (R)n.tokenImage; }
   public void debug(String str)
   {
      System.out.println(str);
   }
   public void Stack_Load(int x){
      if(x==0)
      {
        for(int i=0;i<10;i++)
        {
            debug("ALOAD " + "t"+i+" " + "SPILLEDARG " + (i+stack_diff) );
            //stack_ctr ++ ;
        }
      }
      else
      {
        for(int i=0;i<8;i++)
        {
            debug("ALOAD " + "s"+i+" " + "SPILLEDARG " + (i+stack_diff));

        }
      }

   }
   public void Stack_Store(int x){
      if(x==0)
      {
        for(int i=0;i<10;i++)
        {
            debug("ASTORE " + "SPILLEDARG " + (i+stack_diff)  + " t"+i+" "  );
        }
      }
      else
      {
        for(int i=0;i<8;i++)
        {
            debug("ASTORE " + "SPILLEDARG " + (i+stack_diff)  + " s"+i+" "  );
        }
      }

   }
   public String get_str(int x)
   {
      String res = "";
      for(int i=0;i<x;i++)
      {
        res+="1";
      }
      return res;
   }
   public String get_name(String str)
   {
      String full_name = cur_func + " " + "TEMP " + str;
      if(Liveness.alloc_regs.get(full_name) == -1)
      {
          int off = offset.get(cur_func);
          int num = Liveness.my_spills.get(full_name);
          off+=num;
          debug("ALOAD v0 SPILLEDARG " + off );
          return "v0";
      }
      else
      {
      return (Liveness.alloc_regs.get(full_name) + "");
      }
   }
   public int max(int a,int b)
   {
    if(a>b)
      return a;
    else
      return b;

   }
   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      cur_func = "MAIN";
      debug("MAIN [0] [10] [" + Liveness.my_maxs.get("MAIN") + "]");
      n.f1.accept(this);
      n.f2.accept(this);
      debug("END");
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=(R)"";
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=(R)"";
      String str = (String)n.f0.accept(this);
      cur_func = str;
      n.f1.accept(this);
      String size = (String)n.f2.accept(this);
      debug(str + " [ " + size + " ]");
      cur_size  = Integer.parseInt(size);
      int maxi = Liveness.my_maxs.get(str);
      int args = 8;
      if(maxi>0)
        args+=10;
      if(cur_size>4)
      {
        args+=cur_size-4;
      }
      int spilled_temps = Liveness.func_spills.get(str);
      offset.put(str,args);
      args += spilled_temps;
      
      debug(" [" + args + "]" + " [" + maxi + "]");

      n.f3.accept(this);
      stack_diff = max(cur_size-4,0);
      
      n.f4.accept(this);
      //Stack_Load(1);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=(R)"";
      tot_count++;
      String str = (String)n.f0.accept(this);
      debug(str);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=(R)"";
      n.f0.accept(this);
      debug("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=(R)"";
      n.f0.accept(this);
      debug("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=(R)"";
      n.f0.accept(this);
      String t = (String)n.f1.accept(this);
      String j = (String)n.f2.accept(this);
      debug("CJUMP " + t + " " + cur_func+"1234"+j );
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=(R)"";

      n.f0.accept(this);
      String str = (String)n.f1.accept(this);
      debug("JUMP " + cur_func+"1234"+str);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n) {
      R _ret=(R)"";
      n.f0.accept(this);
      String t1 = (String)n.f1.accept(this);
      String t2 = (String)n.f2.accept(this);
      String t3 = (String)n.f3.accept(this);
      debug("HSTORE " + t1 + " " + t2 + " " + t3);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=(R)"";
      n.f0.accept(this);
      String gg = n.f1.f1.f0.tokenImage;
      String real = cur_func + " " + "TEMP " + gg;
      if(Liveness.alloc_regs.get(real) == -1)
      {
        String t2 = (String)n.f2.accept(this);
        String t3 = (String)n.f3.accept(this);
        debug("HLOAD v0 " + t2 + " " + t3);
        int off = offset.get(cur_func);
        int num = Liveness.my_spills.get(real);
        off+=num;
        debug("ASTORE SPILLEDARG " + off + " v0");
      }
      else
      {
      String t1 = (String)n.f1.accept(this);
      String t2 = (String)n.f2.accept(this);
      String t3 = (String)n.f3.accept(this);
      debug("HLOAD " + t1 + " " + t2 + " " + t3);
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=(R)"";
      n.f0.accept(this);
     

      String gg = n.f1.f1.f0.tokenImage;
      String real = cur_func + " " + "TEMP " + gg;
      if(Liveness.alloc_regs.get(real)==-1)
      {
          String t2 = (String)n.f2.accept(this);
          debug("MOVE v0 " + t2);
          int off = offset.get(cur_func);
          int num = Liveness.my_spills.get(real);
          off+=num;
          debug("ASTORE SPILLEDARG " + off  + " v0");

      }
      else
      {
      String t1 = (String)n.f1.accept(this);
      String t2 = (String)n.f2.accept(this);
      debug("MOVE " + "v1" + " " + t2);
      debug("MOVE " + t1 + " v1");
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=(R)"";
      n.f0.accept(this);
      String t1 = (String)n.f1.accept(this);
      debug("PRINT " + t1 );
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=(R)"";
      String gg = (String)n.f0.accept(this);
      return (R)gg;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=(R)"";
      n.f0.accept(this);
      //debug("BEGIN");
      Stack_Store(1);
      int spills = Liveness.func_spills.get(cur_func);
      int off = offset.get(cur_func);
      
      for(int i=0;i<cur_size;i++)
      {
        if(i>3)
          break;
        int curs = Liveness.alloc_regs.get(cur_func + " TEMP " + i);
        String pr = "s";
        if(curs>7)
        {
          pr="t";
          curs-=8;
        }
        debug("MOVE " + pr+ Liveness.alloc_regs.get(cur_func + " TEMP " + i) + " a"+i);
      }
      for(int i=4;i<cur_size;i++)
      {
        int curs = Liveness.alloc_regs.get(cur_func + " TEMP " + i);
        String pr = "s";
        if(curs>7)
        {
          pr="t";
          curs-=8;
        }
        int gg = i-4;
        debug( "ALOAD v1 SPILLEDARG " + gg);
        debug( "MOVE " + pr+ Liveness.alloc_regs.get(cur_func + " TEMP " + i) + " v1");
      }
      stack_diff  = 8;
      n.f1.accept(this);
      //debug("RETURN");
      String res1 = "MOVE v0 ";
      n.f2.accept(this);
      return_flag = true;
      String res = (String)n.f3.accept(this);
      return_flag = false;
      debug(res1 + res);
      stack_diff = max(cur_size-4,0);
      Stack_Load(1);

      debug("END");
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=(R)"";
      n.f0.accept(this);
      stack_diff+=max(cur_size-4,0);
      Stack_Store(0);
      String res = "CALL ";
      String name =  (String)n.f1.accept(this);
      
      n.f2.accept(this);
      String gg = (String)n.f3.accept(this);
      String [] args = gg.split(" ");
      for(int i=0;i<args.length;i++)
      {
        if(i>3)
          break;
        debug("MOVE a" + i + " " + args[i] );
      }
      if(args.length>4)
      {
        for(int i=4;i<args.length;i++)
        {
          int gg1 = i-3;

          debug("PASSARG " + gg1 + " " + args[i] );
        }
      }
      res += name;
      debug(res);
      Stack_Load(0);
      n.f4.accept(this);
      return (R)"v0";
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=(R)"";
      n.f0.accept(this);
      String res = "HALLOCATE ";
      String t1 = (String)n.f1.accept(this);
      res += " " + t1;
      return (R)res;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=(R)"";
      String t1 = (String)n.f0.accept(this);
      String t2 = (String)n.f1.accept(this);
      String t3 = (String)n.f2.accept(this);

      return (R)(t1+ " " + t2 + " " + t3);
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n) {
      R _ret=(R)"";
      String res = (String)n.f0.accept(this);
      return (R)res;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=(R)"";
      String res = (String)n.f0.accept(this);
      String [] spl = res.split(" ");
      // if(spl[0].equals("TEMP") && return_flag == true)
      // {
      //   tot_count++;
      // }
      return (R)res;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
      R _ret=(R)"";
      n.f0.accept(this);
      String res = (String)n.f1.accept(this);
      if(return_flag == true)
      {
        tot_count++;
      }
      String full_name = get_name(res);
      if(full_name.equals("v0"))
        return (R)full_name;
      int gg = Integer.parseInt(full_name);
      String gg1 ="";
      if(gg<8)
        gg1 = "s";

      else
        {
          gg1 = "t";
          gg-=8;
        }

      return (R)( gg1+ gg);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=(R)"";
      String res = (String)n.f0.accept(this);
      return (R)res;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=(R)"";
      String res = (String)n.f0.accept(this);
      return (R)res;
   }

}
