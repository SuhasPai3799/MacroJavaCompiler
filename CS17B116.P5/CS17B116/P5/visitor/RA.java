//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
class Range{
  int start;
  int end;
  String gg;  //end point
  String ff; //start point
  String full_name;
}
class SortMe implements Comparator<Range>
{
    public int compare(Range o1, Range o2)
    {
        return o1.gg.compareTo(o2.gg);
    }
}
class SortMeSt implements Comparator<Range>
{
    public int compare(Range o1, Range o2)
    {
        return o1.ff.compareTo(o2.ff);
    }
}
public class RA<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   int tot_count = 0;
   String cur_func = "";
   String curs = "1";
   int tot_regs = 18;
   boolean return_flag = false;
   public static HashMap<String,Vector> live_ranges = new HashMap<String,Vector> ();
   public static Set<String> temp_names = new HashSet<String> ();
   public static Set<String> funcs = new HashSet<String> ();
   public static HashMap<String,Vector> funcs_ranges = new HashMap<String,Vector> ();
   //public static Set<Integer> free_regs = new HashSet<Integer> ();
   public static HashMap<String,Integer> alloc_regs = new HashMap<String,Integer> ();
   public static Vector all_ranges = new Vector();
   Vector active = new Vector();
   boolean[] free_regs =  new boolean[tot_regs];
   public R visit(NodeList n) {
      R _ret=(R)"";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         String gg = (String)_ret;
         gg += (String)e.nextElement().accept(this) + " ";
         _ret = (R)gg;
         _count++;
      }
      return (R)_ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
          R _ret=(R)"";
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            String gg = (String)_ret;
         gg += (String)e.nextElement().accept(this) + " " ;
         _ret = (R)gg;
            _count++;
         }
         return (R)_ret;
      }
      else
         return (R)" ";
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return (R)" ";
   }

   public R visit(NodeSequence n) {
      R _ret=(R)"";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         String gg = (String)_ret;
         gg += (String)e.nextElement().accept(this) + " ";
         _ret = (R)gg;
         _count++;
      }
      return (R)_ret;
   }

   public R visit(NodeToken n) { return (R)n.tokenImage; }
   public void debug(String str)
   {
      System.out.println(str);
   }
   public void Stack_Load(int x){
      if(x==0)
      {
        for(int i=0;i<10;i++)
        {
            debug("ALOAD " + "t"+i+" " + "SPILLEDARG " + i );
        }
      }

   }
   public String get_str(int x)
   {
      String res = "";
      for(int i=0;i<x;i++)
      {
        res+="1";
      }
      return res;
   }
   public void Expire(int x)
   {
        Vector rems = new Vector();
        boolean [] rem = new boolean [active.size()];
        for(int i=0;i<active.size();i++)
        {
          //debug(((Range)active.get(i)).end + " ------ " +  ((Range)all_ranges.get(x)).start);
          if(((Range)active.get(i)).end>= ((Range)all_ranges.get(x)).start)
          {
             break;
          } 
          else
          {
            rems.add(i);
            rem[i]=true;
          }
        }
        //debug(rems.size() + " ");
        for(int i=0;i<rems.size();i++)
        {
          //active.remove(rems.get(i));
          //debug(((Range)active.get(i)).full_name);
          free_regs[alloc_regs.get((((Range)active.get(i)).full_name))]=false;
        }
        
        
        //active.clear();
        Vector active1 = new Vector();
        for(int i=0;i<rem.length;i++)
        {
        	if(rem[i]==false)
        	{
        		active1.add(active.get(i));
        	}
        }
        active.clear();
        for(int i=0;i<active1.size();i++)
        {
        	active.add(active1.get(i));
        }
        //debug(active.size() + "");
        Comparator<Range> comparator = new SortMe();
        Collections.sort(active,comparator);
   }
   public void LinScanRegAlloc(Vector func_ranges)
   {
      //Vector active = new Vector();
      //boolean[] free_regs =  new boolean[tot_regs];
      all_ranges.clear();
      active.clear();
      for(int i=0;i<func_ranges.size();i++)
      {
        all_ranges.add(func_ranges.get(i));
      }
      Comparator<Range> comparator1 = new SortMeSt();
      Collections.sort(all_ranges,comparator1);
      // for(int i=0;i<all_ranges.size();i++)
      // {
      // 		debug(((Range)all_ranges.get(i)).start + " ----- " + ((Range)all_ranges.get(i)).end + "        ");

      // }
      for(int i=0;i<tot_regs;i++)
      {
        free_regs[i]=false;
      }

      for(int i=0;i<all_ranges.size();i++)
      {
        Expire(i);

        if(active.size()==18)
        {
          debug("ERROR");
        }
        else
        {
           int alloc = -1;
           for(int j = 0;j<tot_regs;j++)
           {
              if(free_regs[j]==false)
              {
                alloc=j;
                free_regs[j]=true;
                break;
              }
           }
           alloc_regs.put(((Range)all_ranges.get(i)).full_name,alloc);
           active.add(all_ranges.get(i));
           Comparator<Range> comparator = new SortMe();
           Collections.sort(active,comparator);
          
        }
      }
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      cur_func = "MAIN";
      funcs.add("MAIN");
      funcs_ranges.put("MAIN",new Vector());
      n.f1.accept(this);
      cur_func = "";
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      //debug(tot_count + "");

      // for(String s:temp_names)
      // {
      //   Vector v = live_ranges.get(s);
      //   String str = s + "  " ;
      //   for(int i=0;i<v.size();i++)
      //   {
      //     str+=((Range)v.get(i)).start + " ----- " + ((Range)v.get(i)).end + "        ";
      //     all_ranges.add(v.get(i));
      //   }
      //   debug(str);
      // }
      //debug("###################################################");
      
      for(String fun:funcs){
        Comparator<Range> comparator1 = new SortMeSt();
       Collections.sort(funcs_ranges.get(fun),comparator1);
        LinScanRegAlloc((Vector)funcs_ranges.get(fun));
      }
      // for(String s:temp_names)
      // {
      //   Vector v = live_ranges.get(s);
      //   String str = s + "  " ;
      //   for(int i=0;i<v.size();i++)
      //   {
      //     debug(""+alloc_regs.get(((Range)v.get(i)).full_name) + " " + ((Range)v.get(i)).full_name + " starts at " + ((Range)v.get(i)).start + " ends at " + ((Range)v.get(i)).end );
      //   }
        
      // }
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      String f_name = (String)n.f0.accept(this);
      funcs.add(f_name);
      funcs_ranges.put(f_name,new Vector());
      n.f1.accept(this);
      String size = (String)n.f2.accept(this);
      for(int i=0;i<Integer.parseInt(size);i++)
      {
      	  String full_name = f_name + " " + "TEMP " + i;
      	  live_ranges.put(full_name,new Vector());
      	  temp_names.add(full_name);
      	  Range obj = new Range();
          obj.start = tot_count;
          obj.end = tot_count;
          obj.gg = get_str(tot_count);
          obj.ff = get_str(obj.start);
          obj.full_name = full_name + ":" + 0;
          
          funcs_ranges.get(f_name).add(obj);
          live_ranges.get(full_name).add(obj);
      }

      n.f3.accept(this);
      cur_func = f_name;
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      tot_count++;

      String res = (String)n.f0.accept(this);
      String[] alls = res.split(" ");
      Vector temps = new Vector();
      for (int i=0;i<alls.length-1;i++)
      {
        if(alls[i].equals("TEMP"))
        {
          temps.add(alls[i] + " " + alls[i+1]);
        }
      }
      // for(int i=0;i<temps.size();i++)
      // {
      //   debug((String)temps.get(i));
      // }
      boolean moves = false;
      for(int i=0;i<alls.length;i++)
      {
        if(alls[i].equals("MOVE") || alls[i].equals("HLOAD"))
        {
          moves = true;
        }  
      }
      for(int i=0;i<temps.size();i++)
      {
        String full_name = cur_func + " " + (String)temps.get(i);

        if(!temp_names.contains(full_name))
        {
          live_ranges.put(full_name,new Vector());
          temp_names.add(full_name);
        }
        Vector v = live_ranges.get(full_name);
        if(v.size()==0 || (i==0 && moves == true))
        {

          Range obj = new Range();
          obj.start = tot_count;
          obj.end = tot_count;
          obj.gg = get_str(tot_count);
          obj.ff = get_str(obj.start);
          obj.full_name = full_name + ":" + v.size();
          
          funcs_ranges.get(cur_func).add(obj);
          live_ranges.get(full_name).add(obj);


        }
        else
        {
           
           int siz = v.size();
           siz--;
           Range obj = (Range)v.get(siz);
           obj.end = tot_count-1;
           obj.gg = get_str(tot_count-1);
           //obj.full_name = full_name + ":" + (siz+1);
           v.set(siz,obj);
           live_ranges.put(full_name,v);
        }
      }
      return (R)res;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)"NOOP";
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)"ERROR";
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      String t1 = "CJUMP";
      String t2 = (String)n.f1.accept(this);
      String t3 = (String)n.f2.accept(this);
      String res = t1 +  " " + t2 + " " + t3;

      return (R)res;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      String t1 = "JUMP";
      String t2 = (String)n.f1.accept(this);
      String res= t1 + " " + t2;
      return (R)res;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      String t1 = "HSTORE";
      String t2 = (String)n.f1.accept(this);
      String t3 = (String)n.f2.accept(this);
      String t4 = (String)n.f3.accept(this); 
      String res = t1 +  " " + t2 + " " + t3 + " " + t4;
      return (R)res;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      String t1 = "HLOAD";
      String t2 = (String)n.f1.accept(this);
      String t3 = (String)n.f2.accept(this);
      String t4 = (String)n.f3.accept(this); 
      String res = t1 +  " " + t2 + " " + t3 + " " + t4;
      return (R)res;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      String t1 =  "MOVE";
      String t2 = (String)n.f1.accept(this);
      String t3 = (String)n.f2.accept(this);
      String res = t1 +  " " + t2 + " " + t3;

      return (R)res;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      String t1 =  "PRINT";
      String t2 = (String)n.f1.accept(this);
      String res= t1 + " " + t2;
      return (R)res;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      String t1 = (String)n.f0.accept(this);
      return (R)t1;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      String t1 =  "BEGIN";
      String t2 = (String)n.f1.accept(this);
      String t3 = (String)n.f2.accept(this);
      return_flag = true;
      String t4 = (String)n.f3.accept(this);
      return_flag = false;
      String t5 = "END";
      String res = t1 + " " + t2 + " " + t3 + " " + t4 + " " + t5;
      return (R)res;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      String t1 = "CALL";
      String t2 = (String)n.f1.accept(this);
      String t3 = (String)n.f2.accept(this);
      String t4 = (String)n.f3.accept(this);
      String t5 = (String)n.f4.accept(this);
      String res = t1 + " " + t2 + " " + t3 + " " + t4 + " " + t5;
      return (R)res;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      String t1 = "HALLOCATE";
      String t2 = (String)n.f1.accept(this);
      String res = t1 + " " + t2;
      return (R)res;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      String t1 = (String)n.f0.accept(this);
      String t2 = (String)n.f1.accept(this);
      String t3 = (String)n.f2.accept(this);
      String res = t1 + " " + t2 + " " + t3 ;
      return (R)res;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n) {
      R _ret=null;
      String res = (String)n.f0.accept(this);
      //debug("OP  " + res);  
      return (R)res;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      String res = (String)n.f0.accept(this);
      String [] spl = res.split(" ");
      if(spl[0].equals("TEMP") && return_flag == true)
      {
      	tot_count++;
      	String full_name = cur_func + " " + res;
      	Vector v = live_ranges.get(full_name);
      	int siz = v.size();
		siz--;
		Range obj = (Range)v.get(siz);
		obj.end = tot_count-1;
		obj.gg = get_str(tot_count-1);
		//obj.full_name = full_name + ":" + (siz+1);
		v.set(siz,obj);
		live_ranges.put(full_name,v);

      }
      return (R)res;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
      R _ret=null;
      String gg = "TEMP";

      String gg1 = (String)n.f1.accept(this);
      return (R)(gg + " " + gg1);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      
      return (R)n.f0.accept(this);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      n.f0.accept(this);
      //debug(n.f0.tokenImage);
      return (R)n.f0.tokenImage;
   }

}
