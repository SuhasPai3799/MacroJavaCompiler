//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class MIPS<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  boolean labs = false;
  int cur_args = 0; 
  int tot_offset = 0;
  int diff = 0;
  int others = 0;
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
      {
         String str = (String)n.node.accept(this);
         if(labs && str!=null)
         {
            debug(str+":");
            labs = false;
          }
         return n.node.accept(this);
      }
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return (R)n.tokenImage; }


   //
   // User-generated visitor methods below
   //
   public void debug(String str)
   {
      System.out.println(str);
   }
   public int max(int a,int b)
   {
      if(a>b)
        return a;
      else
        return b;
   }
   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      String max_calls = (String)n.f8.accept(this);
      n.f9.accept(this);
      int maxi = Integer.parseInt(max_calls);
      int off = 4 + 4*max(0,maxi-4);
      debug(".text \n .globl main \n main:");
      debug("move $fp, $sp");
      debug("subu $sp, $sp, "+off);
      debug("sw $ra, -4($fp)");
      n.f10.accept(this);
      n.f11.accept(this);
     
      debug("lw $ra, -4($fp)");
      debug("addu $sp, $sp, "+off);
      debug("j $ra");
      n.f12.accept(this);
      n.f13.accept(this);
      String gg = "\"" + "\\" + "n" + "\"";
      String gg1 = "\\" + "n" + "\"";
      debug(".text \n .globl _halloc \n_halloc: li $v0, 9 \nsyscall \n j $ra \n.text \n.globl _print \n_print: \nli $v0, 1 \nsyscall \nla $a0, newl \nli $v0, 4 \nsyscall\n j $ra \n.data \n.align 0 \nnewl: .asciiz " + gg + " \n.data \n.align 0 \nstr_er: \n.asciiz \" ERROR: abnormal termination" + gg1);
      
      //debug(gg);
      n.f14.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n) {
      R _ret=null;
      String name = (String)n.f0.accept(this);
     
      n.f1.accept(this);
      others = 0;
      String args = (String)n.f2.accept(this);
      
      cur_args = Integer.parseInt(args);
      others+=cur_args;
      n.f3.accept(this);
      n.f4.accept(this);
      String stack_sp = (String)n.f5.accept(this);
      int stack = (Integer.parseInt(stack_sp));

      int off;
      
      n.f6.accept(this);
      n.f7.accept(this);
      int max_call = Integer.parseInt((String)n.f8.accept(this));
      others+=max_call;
      if(max_call>4)
      {

        off = max(0,max_call-4);
        tot_offset = max(0,stack-18);
        diff=  18;
      }
      else
      {
        off = 0;
        tot_offset = max(0,stack-8);
        diff = 8;
      }
      if(off == 0 && tot_offset!=0)
      {
        off = tot_offset;
      }
      int arg_off = max(cur_args-4,0);
      debug(".text \n.globl " + name + "\n"+name + ":");
      debug("sw $fp, -8($sp)");
      debug("move $fp, $sp");
      int st = 40 + 4 *(arg_off+off);
      debug("subu $sp, $sp, " + st);
      debug("sw $ra, -4($fp)");
      for(int i=0;i<8;i++)
      {
        int gg = i*4+st-40;
        debug("sw $s"+i + " , "+gg + "($sp)");
      }
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      for(int i=0;i<8;i++)
      {
        int gg = i*4+st-40;
        debug("lw $s"+i + " , "+gg + "($sp)");
      }
      debug("lw $ra, -4($fp)");
      int hh = st-8;
      debug("lw $fp, " + hh + " ($sp)");
      debug("addu $sp, $sp, "+st);
      debug("j $ra");

      n.f12.accept(this);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      debug("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      debug("li $v0, 4");
      debug("la $a0, str_er");
      debug("syscall");
      debug("li $v0, 10");
      debug("syscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String t1 = (String)n.f1.accept(this);
      String t2 = (String)n.f2.accept(this);
      debug("beqz " + t1 + ", " + t2 );
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String t1 = (String)n.f1.accept(this);
      debug("b " + t1);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String t1 = (String)n.f1.accept(this);
      String t2 = (String)n.f2.accept(this);
      String t3 = (String)n.f3.accept(this);
      debug("sw " + t3 + ", " + t2 + " (" + t1 + ")" );
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String t1 = (String)n.f1.accept(this);
      String t2 = (String)n.f2.accept(this);
      String t3 = (String)n.f3.accept(this);
      debug("lw " + t1 + ", " + t3 + " (" + t2 + ")" );
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      String t1 = (String)n.f0.accept(this);
      String t2 = (String)n.f1.accept(this);
      String t3 = (String)n.f2.accept(this);
      if(t3.contains("$"))
      {
        debug("move " + t2 + ", "  +  t3);
      }
      else if(t3.contains("_"))
      {
        debug("la " + t2 + ", " + t3);
      }
      else
      {
          debug("li " + t2 + ", " + t3);
      }
      //debug(t3);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
       //debug("HELLO");
      n.f0.accept(this);

      String t1 = (String)n.f1.accept(this);
      if(t1.contains("$"))
      {
        debug("move $a0 , " + t1);
        debug("jal _print");
      }
      else
      {
        debug("li $a0 ," + t1);
        debug("jal _print");
      }
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n) {
      R _ret=null;
      //debug("Hello");
      n.f0.accept(this);
      String reg = (String)n.f1.accept(this);
      String pos  = (String)n.f2.accept(this);
      String [] spl = pos.split(" ");
      int p = Integer.parseInt(spl[1]);
      if(cur_args>4 && p<(cur_args-4))
      {
        int x = p*4;
        debug("lw " + reg + ", " + x + " ($fp)");
      }
      else if(tot_offset!=0 && p>=diff && others ==0 || reg.equals("$v0"))
      {
        int x = (p-diff)*4;
        debug("lw " + reg + ", " + x + " ($sp)");
      }
    
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String pos  = (String)n.f1.accept(this);
      String reg = (String)n.f2.accept(this);
      
      String [] spl = pos.split(" ");
      int p = Integer.parseInt(spl[1]);

      if(cur_args>4 && p<(cur_args-4))
      {
        int x = p*4;
        debug("lw " + reg + ", " + x + " ($fp)");
      }
      else if(tot_offset!=0 && p>=diff && others==0 || reg.equals("$v0"))
      {
        int x = (p-diff)*4;
        debug("sw " + reg + ", " + x + " ($sp)");
      }
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String off = (String)n.f1.accept(this);
      String reg = (String)n.f2.accept(this);
      int o = Integer.parseInt(off)-1;
      o = o*4;
      debug("sw " + reg + ", "+o +"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n) {
      R _ret=null;
      String t1 = (String)n.f0.accept(this);
      String t2 = (String)n.f1.accept(this);
      debug("jalr "  + t2 );
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;  
      String res = (String)n.f0.accept(this);
      return (R)res;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      String t1 = (String)n.f0.accept(this);
      String t2 = (String)n.f1.accept(this);
      if(t2.contains("$"))
      {
        debug("move $a0, "+t2);
      }
      else
      {
        debug("li $a0 " + t2 );
      }
      debug("jal _halloc");

      //String res = t1 + " "  + t2;
      return (R)"$v0";
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      String t1 = (String)n.f0.accept(this);
      String t2 = (String)n.f1.accept(this);
      String t3 = (String)n.f2.accept(this);
      String res = (t1 + " " + t2 + " " + t3);
      if(t1.equals("add") || t1.equals("sub") || t1.equals("mul") || t1.equals("div"))
      {

        if(t3.contains("$"))
        debug(t1 + " " + "$v0, " + t2 + ", " + t3);
        else
        {
          debug("li $v0 ," + t3);
          debug(t1 + " " + "$v0 ," + t2 + ", $v0");
        }
      }
      else if(t1.equals("le"))
      {
          if(t3.contains("$"))
          {
            debug("move $v0 ," + t3);
            debug("add $v0, $v0, 1 ");
            debug("slt $v0 ," + t2 + " , " + " $v0");
          }
          else
          {
            debug("li $v0 ," + t3);
            debug("add $v0, $v0, 1");
            debug("slt $v0," + t2 + " , " + "$v0");
          }
      }
      else
      {
          if(t3.contains("$"))
          {
            debug("move $v0 ," + t3);
            //debug("add $v0, $v0, 1 ");
            debug("sne $v0 ," + t2 + " , " + " $v0");
          }
          else
          {
            debug("li $v0 ," + t3);
            //debug("add $v0, $v0, 1");
            debug("sne $v0," + t2 + " , " + "$v0");
          }

      }

      return (R)"$v0";
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n) {
      R _ret=null;
      String res = (String)n.f0.accept(this);
      if(res.equals("PLUS"))
      {
        res = "add";
      }
      else if(res.equals("MINUS"))
      {
        res = "sub";
      }
      else if(res.equals("TIMES"))
      {
        res = "mul";
      }
      else if(res.equals("DIV"))
      {
        res = "div";

      }
      else if(res.equals("LE"))
      {
        res = "le";
      }
      else
      {
        res = "ne";
      }
      return (R)res;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n) {
      R _ret=null;
      String t1 = (String)n.f0.accept(this);
      String t2 = (String)n.f1.accept(this);
      String res = t1 + " " + t2;
      //debug(res);
      return (R)res;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      String res = (String)n.f0.accept(this);
      return (R)res;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n) {
      R _ret=null;
      String t1 = (String)n.f0.accept(this);
      String res = "$"  + t1;

      return (R)res;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      String res = (String)n.f0.accept(this);
      return (R)res;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      labs = true;
      String res = (String)n.f0.accept(this);
      return (R)res;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

}
